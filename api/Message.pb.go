// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/Message.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//请求message
type HelloReq struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	MsgId                int32    `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	GoodsName            string   `protobuf:"bytes,3,opt,name=goodsName,proto3" json:"goodsName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_72f6451837ca3ca8, []int{0}
}

func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReq.Unmarshal(m, b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return xxx_messageInfo_HelloReq.Size(m)
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

func (m *HelloReq) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func (m *HelloReq) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *HelloReq) GetGoodsName() string {
	if m != nil {
		return m.GoodsName
	}
	return ""
}

//响应message
type HelloRep struct {
	Rep                  string   `protobuf:"bytes,1,opt,name=rep,proto3" json:"rep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRep) Reset()         { *m = HelloRep{} }
func (m *HelloRep) String() string { return proto.CompactTextString(m) }
func (*HelloRep) ProtoMessage()    {}
func (*HelloRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_72f6451837ca3ca8, []int{1}
}

func (m *HelloRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRep.Unmarshal(m, b)
}
func (m *HelloRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRep.Marshal(b, m, deterministic)
}
func (m *HelloRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRep.Merge(m, src)
}
func (m *HelloRep) XXX_Size() int {
	return xxx_messageInfo_HelloRep.Size(m)
}
func (m *HelloRep) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRep.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRep proto.InternalMessageInfo

func (m *HelloRep) GetRep() string {
	if m != nil {
		return m.Rep
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "api.HelloReq")
	proto.RegisterType((*HelloRep)(nil), "api.HelloRep")
}

func init() { proto.RegisterFile("api/Message.proto", fileDescriptor_72f6451837ca3ca8) }

var fileDescriptor_72f6451837ca3ca8 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2c, 0xc8, 0xd4,
	0xf7, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e,
	0x2c, 0xc8, 0x54, 0x0a, 0xe0, 0xe2, 0xf0, 0x48, 0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d, 0x14, 0x12,
	0xe0, 0x62, 0x2e, 0x4a, 0x2d, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x44,
	0xb8, 0x58, 0x73, 0x8b, 0xd3, 0x3d, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0x20, 0x1c,
	0x21, 0x19, 0x2e, 0xce, 0xf4, 0xfc, 0xfc, 0x94, 0x62, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x66, 0xb0,
	0x6a, 0x84, 0x80, 0x92, 0x0c, 0xdc, 0xc4, 0x02, 0x88, 0x89, 0x05, 0x08, 0x13, 0x0b, 0x8c, 0x8c,
	0xb9, 0x58, 0xc1, 0xb2, 0x42, 0x5a, 0x5c, 0x1c, 0xc1, 0x89, 0x95, 0x10, 0x36, 0xaf, 0x5e, 0x62,
	0x41, 0xa6, 0x1e, 0xcc, 0x1d, 0x52, 0x28, 0xdc, 0x02, 0x25, 0x06, 0x23, 0x43, 0x2e, 0x36, 0xdf,
	0xe2, 0xf4, 0xe0, 0xb2, 0x22, 0x21, 0x75, 0x2e, 0x56, 0x97, 0x7c, 0x10, 0x83, 0x80, 0x96, 0x24,
	0x36, 0xb0, 0x1f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xba, 0x9e, 0x18, 0xda, 0xf8, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	//定义服务中的方法
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRep, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRep, error) {
	out := new(HelloRep)
	err := c.cc.Invoke(ctx, "/api.Hello/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	//定义服务中的方法
	SayHello(context.Context, *HelloReq) (*HelloRep, error)
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) SayHello(ctx context.Context, req *HelloReq) (*HelloRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Hello/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Hello_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/Message.proto",
}

// MsgSvrClient is the client API for MsgSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgSvrClient interface {
	//定义服务中的方法
	DoSvr(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRep, error)
}

type msgSvrClient struct {
	cc *grpc.ClientConn
}

func NewMsgSvrClient(cc *grpc.ClientConn) MsgSvrClient {
	return &msgSvrClient{cc}
}

func (c *msgSvrClient) DoSvr(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRep, error) {
	out := new(HelloRep)
	err := c.cc.Invoke(ctx, "/api.MsgSvr/DoSvr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgSvrServer is the server API for MsgSvr service.
type MsgSvrServer interface {
	//定义服务中的方法
	DoSvr(context.Context, *HelloReq) (*HelloRep, error)
}

// UnimplementedMsgSvrServer can be embedded to have forward compatible implementations.
type UnimplementedMsgSvrServer struct {
}

func (*UnimplementedMsgSvrServer) DoSvr(ctx context.Context, req *HelloReq) (*HelloRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSvr not implemented")
}

func RegisterMsgSvrServer(s *grpc.Server, srv MsgSvrServer) {
	s.RegisterService(&_MsgSvr_serviceDesc, srv)
}

func _MsgSvr_DoSvr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgSvrServer).DoSvr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MsgSvr/DoSvr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgSvrServer).DoSvr(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MsgSvr",
	HandlerType: (*MsgSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSvr",
			Handler:    _MsgSvr_DoSvr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/Message.proto",
}
